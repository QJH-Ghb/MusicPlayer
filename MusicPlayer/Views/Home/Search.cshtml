@{
    ViewBag.Title = "音樂播放器";
    var songs = ViewData["Songs"] as Dictionary<string, string> ?? new Dictionary<string, string>();
    Layout = "";
}

<!-- 背景星空 & 光點 -->
<div class="star-bg">
    <div class="stars"></div>
    <div class="glow"></div>
</div>

<!-- 導覽列 -->
<nav class="navbar">
    <ul class="nav-links">
        <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="Search">Search</a></li>
        <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="PlayList">PlayList</a></li>
        <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="Usercolumn">Usercolumn</a></li>
        <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="Login">Login</a></li>

    </ul>
</nav>

<!-- 音樂播放器卡片 -->
<div class="music-player">
    <h2 id="songTitle">輸入歌曲名稱開始播放 🎵</h2>

    <div class="input-section">
        <input type="text" id="songInput" placeholder="輸入歌曲名稱或歌手">
        <button id="playBtn">播放</button>
        <ul id="suggestions" class="suggestions-list"></ul>
        <div id="errorMsg" class="error-msg"></div>
    </div>

    <audio id="audioPlayer" controls class="audio-player" preload="metadata">
        <source id="audioSource" src="" type="audio/mp3">
        您的瀏覽器不支援音樂播放。
    </audio>
</div>

<div class="bg-light"></div>

<style>
    /* ===== 星空背景 & 光點 ===== */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        height: 100vh;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
        position: relative;
        color: #fff;
        background: radial-gradient(circle at bottom, #0a0a2a 0%, #000010 100%);
    }

    .star-bg, .bg-light {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 0;
    }

        .star-bg .stars {
            width: 100%;
            height: 100%;
            background: transparent url('https://www.transparenttextures.com/patterns/stardust.png') repeat;
            animation: moveStars 120s linear infinite;
        }

    @@keyframes moveStars {
        from

    {
        background-position: 0 0;
    }

    to {
        background-position: -10000px 5000px;
    }

    }

    .glow {
        position: absolute;
        width: 800px;
        height: 800px;
        background: radial-gradient(circle, rgba(80,140,255,0.25), transparent 70%);
        filter: blur(100px);
        animation: glowMove 40s infinite ease-in-out alternate;
    }

    @@keyframes glowMove {
        0%

    {
        transform: translate(-200px, -200px);
    }

    100% {
        transform: translate(200px, 200px);
    }

    }

    /* ===== 導覽列 ===== */
    .navbar {
        position: fixed;
        top: 0;
        width: 100%;
        display: flex;
        justify-content: center;
        background: rgba(255,255,255,0.05);
        backdrop-filter: blur(10px);
        padding: 12px 0;
        z-index: 10;
    }

    .nav-links {
        display: flex;
        list-style: none;
        gap: 30px;
        padding: 0;
        margin: 0;
    }

        .nav-links li a {
            color: #fff;
            text-decoration: none;
            font-weight: bold;
            transition: 0.3s;
        }

            .nav-links li a:hover {
                color: #9bc9ff;
                text-shadow: 0 0 10px rgba(155, 201, 255, 0.7);
            }

    /* ===== 音樂播放器卡片 ===== */
    .music-player {
        position: relative;
        z-index: 10;
        background-color: rgba(255,255,255,0.1);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        padding: 35px 40px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.4);
        width: 90%;
        max-width: 420px;
        transition: transform 0.15s linear, box-shadow 0.3s ease;
        margin-top: 80px; /* 讓導覽列不遮住卡片 */
    }

        .music-player:hover {
            transform: scale(1.02);
            box-shadow: 0 0 50px rgba(120,150,255,0.5);
        }

    h2 {
        text-align: center;
        color: #a8c0ff;
        margin-bottom: 25px;
        text-shadow: 0 0 15px rgba(168,192,255,0.6);
    }

    /* ===== 輸入區 ===== */
    .input-section {
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 20px;
    }

    #songInput {
        padding: 12px 15px;
        border-radius: 12px;
        border: none;
        font-size: 16px;
        background: rgba(255,255,255,0.2);
        color: #fff;
        transition: all 0.3s ease;
    }

        #songInput:focus {
            outline: none;
            box-shadow: 0 0 20px rgba(80,140,255,0.8);
            background: rgba(255,255,255,0.25);
        }

    /* ===== 播放按鈕 ===== */
    #playBtn {
        padding: 12px 15px;
        border: none;
        border-radius: 12px;
        background: linear-gradient(90deg, #5c6bc0, #8e24aa);
        color: white;
        font-weight: bold;
        cursor: pointer;
        overflow: hidden;
        transition: all 0.3s ease;
    }

        #playBtn:hover {
            background: linear-gradient(90deg, #8e24aa, #5c6bc0);
            transform: scale(1.05);
        }

    /* ===== 建議列表 ===== */
    .suggestions-list {
        list-style: none;
        padding: 0;
        margin: 0;
        max-height: 200px;
        overflow-y: auto;
        border-radius: 12px;
        background: rgba(0,0,0,0.6);
        position: absolute;
        top: 65px;
        width: 100%;
        z-index: 1000;
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        opacity: 0;
        transform: translateY(-10px);
        transition: all 0.25s;
    }

        .suggestions-list.show {
            opacity: 1;
            transform: translateY(0);
        }

        .suggestions-list li {
            padding: 10px 14px;
            cursor: pointer;
            color: #fff;
        }

            .suggestions-list li:hover, .suggestions-list li.highlight {
                background-color: rgba(120,200,255,0.4);
            }

            .suggestions-list li.playing {
                background-color: rgba(120,180,255,0.5);
                font-weight: bold;
            }

    /* ===== 錯誤訊息 ===== */
    .error-msg {
        color: #ff8a80;
        font-size: 14px;
        margin-top: 5px;
        min-height: 18px;
        text-align: center;
    }

    /* ===== 音樂播放器 ===== */
    .audio-player {
        width: 100%;
        outline: none;
        border-radius: 12px;
        background-color: rgba(255,255,255,0.2);
    }
</style>

<script>
    const songs = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(songs));
    const input = document.getElementById('songInput');
    const playBtn = document.getElementById('playBtn');
    const audio = document.getElementById('audioPlayer');
    const source = document.getElementById('audioSource');
    const title = document.getElementById('songTitle');
    const errorMsg = document.getElementById('errorMsg');
    const suggestions = document.getElementById('suggestions');
    const musicPlayerCard = document.querySelector('.music-player');
    const bgLightContainer = document.querySelector('.bg-light');

    let selectedIndex = -1;

    // 背景光點生成
    let lightCount = window.innerWidth < 480 ? 15 : 30;
    for(let i=0;i<lightCount;i++){
        const span = document.createElement('span');
        span.style.left = Math.random()*100+'vw';
        span.style.top = Math.random()*100+'vh';
        span.style.width = span.style.height = (Math.random()*12+8)+'px';
        span.style.animationDuration = (Math.random()*15+10)+'s';
        bgLightContainer.appendChild(span);
    }

    // 搜尋與建議
    const normalize = str=>str.toLowerCase().replace(/\s+/g,'').replace(/[^\w\u4e00-\u9fa5]/g,'');
    function updateSuggestions(value){
        suggestions.innerHTML='';
        if(!value) return suggestions.classList.remove('show');
        let hasMatch = false;
        Object.keys(songs).forEach(song=>{
            if(normalize(song).includes(normalize(value))){
                hasMatch = true;
                const li = document.createElement('li');
                li.textContent=song;
                li.addEventListener('click',()=>{input.value=song; playSong(song); hideSuggestions();});
                suggestions.appendChild(li);
            }
        });
        if(!hasMatch){
            const li = document.createElement('li');
            li.textContent = "沒有找到相關歌曲";
            li.style.cursor = 'default';
            suggestions.appendChild(li);
        }
        suggestions.classList.add('show');
    }
    function hideSuggestions(){ suggestions.innerHTML=''; suggestions.classList.remove('show'); }

    input.addEventListener('input',()=>updateSuggestions(input.value.trim()));

    input.addEventListener('keydown', e=>{
        const items = Array.from(suggestions.children).filter(li=>li.style.cursor!=='default');
        if(items.length===0) return;
        if(e.key==='ArrowDown'){ selectedIndex=(selectedIndex+1)%items.length; items.forEach(li=>li.classList.remove('highlight')); items[selectedIndex].classList.add('highlight'); input.value=items[selectedIndex].textContent;}
        else if(e.key==='ArrowUp'){ selectedIndex=(selectedIndex-1+items.length)%items.length; items.forEach(li=>li.classList.remove('highlight')); items[selectedIndex].classList.add('highlight'); input.value=items[selectedIndex].textContent;}
        else if(e.key==='Enter'){ if(selectedIndex>=0) { playSong(items[selectedIndex].textContent); hideSuggestions(); } else { playBtn.click(); } selectedIndex=-1; }
    });

    // 播放功能
    let audioContext, analyser, sourceNode, dataArray;
    function initAudioContext(){
        if(!audioContext){
            audioContext = new (window.AudioContext||window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            sourceNode = audioContext.createMediaElementSource(audio);
            sourceNode.connect(analyser);
            analyser.connect(audioContext.destination);
            analyser.fftSize = 64;
            dataArray = new Uint8Array(analyser.frequencyBinCount);
        }
    }

    function playSong(name){
        if(!songs[name]) { errorMsg.textContent="找不到這首歌!"; return; }
        Array.from(suggestions.children).forEach(li=>li.classList.remove('playing'));
        const activeLi = Array.from(suggestions.children).find(li=>li.textContent===name);
        if(activeLi) activeLi.classList.add('playing');

        source.src = songs[name];
        audio.load();
        audio.play().then(()=>{ errorMsg.textContent=""; }).catch(()=>{ errorMsg.textContent="播放失敗"; });

        title.textContent="正在播放：" + name;
        errorMsg.textContent="";

        initAudioContext();
        animateCardWithAudio();
    }

    playBtn.addEventListener('click', ()=>{
        const value = input.value.trim();
        const match = Object.keys(songs).find(k=>normalize(k).includes(normalize(value)));
        if(match) playSong(match);
        else errorMsg.textContent="找不到這首歌!";
    });

    // 音樂節奏動畫
    function animateCardWithAudio(){
        const spans = bgLightContainer.querySelectorAll('span');
        function animate(){
            analyser.getByteFrequencyData(dataArray);
            let sum = dataArray.reduce((a,b)=>a+b,0);
            let avg = sum/dataArray.length;

            let scale = 1 + avg/1200;
            let rotate = (avg/255)*5;
            musicPlayerCard.style.transform=`scale(${scale}) rotate(${rotate}deg)`;

            spans.forEach(span=>{
                let drift=Math.random()*avg/500;
                let brightness=0.1+(avg/500)*0.3;
                span.style.transform=`translateX(${drift}px)`;
                span.style.background=`rgba(255,255,255,${brightness})`;
            });

            requestAnimationFrame(animate);
        }
        animate();
    }

</script>
